generator client {
  provider = "prisma-client-js"
  output   = "./generated/client-source"
}

datasource db {
  provider     = "postgresql"
  url          = env("HEROKU_DATABASE_URL")
  directUrl    = env("HEROKU_DATABASE_URL")
  relationMode = "prisma"
}

// Copy all models from the main schema
model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  googleId  String?  @unique
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogs     Blog[]
}

model Store {
  id                 Int                 @id @default(autoincrement())
  name               String
  url                String
  description        String?
  active             Boolean             @default(true)
  userSubmit         Boolean             @default(true)
  metaKeywords       String?
  metaTitle          String?
  metaDescription    String?
  categoryId         Int?
  category           Category?           @relation(fields: [categoryId], references: [id])
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  slug               String              @unique
  topStore           Boolean             @default(false)
  oldSlug            String?
  searchTerms        String?
  networkId          String?
  network            String?
  domain             String?
  viglinkId          Int?
  viglinkGroupId     Int?
  viglinkName        String?
  paths              String?
  promoCodes         PromoCode[]
  blogs              StoreBlog[]
  categoryPromoCodes CategoryPromoCode[]
  blogPosts          Blog[]
}

model Category {
  id              Int                 @id @default(autoincrement())
  name            String
  description     String?
  metaKeywords    String?
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  slug            String              @unique
  stores          Store[]
  promoCodes      CategoryPromoCode[]
}

model PromoCode {
  id           Int                 @id @default(autoincrement())
  storeId      Int
  store        Store               @relation(fields: [storeId], references: [id])
  title        String
  description  String?
  starts       DateTime
  code         String
  link         String
  homepage     Boolean             @default(false)
  freeShipping Boolean             @default(false)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  expires      DateTime?
  userSubmit   Boolean             @default(false)
  approved     Boolean             @default(true)
  orderId      Int?
  categories   CategoryPromoCode[]
}

model CategoryPromoCode {
  id          Int       @id @default(autoincrement())
  promoCodeId Int
  categoryId  Int
  storeId     Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])
  store       Store     @relation(fields: [storeId], references: [id])

  @@unique([promoCodeId, categoryId])
}

model StoreBlog {
  id          Int      @id @default(autoincrement())
  storeId     Int
  store       Store    @relation(fields: [storeId], references: [id])
  publishDate String
  post        String
  author      String   @default("Tyler")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pubDate     DateTime
}

model Subscriber {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NetworkMerchant {
  id        String  @id @default(cuid())
  network   String
  websiteId String
  name      String
  networkId String
  url       String
  domain    String
  active    Boolean @default(true)
  joined    Boolean @default(false)
  linkId    String?
}

model Blog {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  published   Boolean   @default(false)
  publishedAt DateTime?
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id])
  storeId     Int?
  store       Store?    @relation(fields: [storeId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
